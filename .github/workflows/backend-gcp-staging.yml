name: Backend Deploy (Cloud Run - Staging)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: backend-deploy
  cancel-in-progress: true

# Removed env section to prevent variable conflicts

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: r-and-d-agent-mvp

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Verify authentication and set config
        run: |
          gcloud config set project r-and-d-agent-mvp -q
          gcloud config set compute/region us-central1 -q
          echo "Current project: $(gcloud config get-value project)"
          echo "Current account: $(gcloud auth list --filter=status:ACTIVE --format='value(account)')"

      - name: Enable required services (idempotent)
        run: |
          gcloud services enable run.googleapis.com artifactregistry.googleapis.com secretmanager.googleapis.com iamcredentials.googleapis.com -q

      - name: Ensure Pinecone index exists and get host
        continue-on-error: true                  # do not fail the job if jq/API flake
        id: pinecone
        env:
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          PINECONE_INDEX: rd-agent-staging
          PINECONE_HOST: ${{ secrets.PINECONE_HOST }}
        run: |
          set -euo pipefail
          IDX="${PINECONE_INDEX:-rd-agent-memory}"
          # If host already provided via secret, skip provisioning
          if [ -n "${PINECONE_HOST:-}" ]; then
            echo "host=${PINECONE_HOST}" >> $GITHUB_OUTPUT
            exit 0
          fi
          # List indexes safely
          CODE=$(curl -sS -w "%{http_code}" -o list.json -H "Api-Key: $PINECONE_API_KEY" https://api.pinecone.io/indexes || true)
          if [ "$CODE" != "200" ] || ! jq -e . list.json >/dev/null 2>&1; then
            echo "host=" >> $GITHUB_OUTPUT
            exit 0
          fi
          if ! jq -e --arg n "$IDX" '.indexes // [] | map(.name) | index($n)' list.json >/dev/null; then
            echo "Creating Pinecone index $IDX"
            CODE=$(curl -sS -w "%{http_code}" -o create.json -X POST https://api.pinecone.io/indexes \
              -H "Api-Key: $PINECONE_API_KEY" -H "Content-Type: application/json" \
              -d "{\"name\":\"$IDX\",\"dimension\":384,\"metric\":\"cosine\",\"spec\":{\"serverless\":{\"cloud\":\"aws\",\"region\":\"us-east-1\"}}}" || true)
            if [ "$CODE" = "201" ] || [ "$CODE" = "200" ]; then
              sleep 5
            fi
          fi
          CODE=$(curl -sS -w "%{http_code}" -o desc.json -H "Api-Key: $PINECONE_API_KEY" https://api.pinecone.io/indexes/$IDX || true)
          if [ "$CODE" = "200" ] && jq -e . desc.json >/dev/null 2>&1; then
            HOST=$(jq -r '.host // empty' desc.json)
            echo "host=$HOST" >> $GITHUB_OUTPUT
          else
            echo "host=" >> $GITHUB_OUTPUT
          fi

      - name: Enable Docker auth
        run: gcloud auth configure-docker us-central1-docker.pkg.dev -q

      - name: Preflight - route traffic to latest (best-effort)
        continue-on-error: true
        run: |
          gcloud run services update-traffic rd-agent-staging \
            --region us-central1 \
            --to-latest \
            --quiet

      - name: Docker login to Artifact Registry
        run: |
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://us-central1-docker.pkg.dev

      - name: Ensure Artifact Registry repository exists
        run: |
          gcloud artifacts repositories create rd-agent \
            --repository-format=docker --location=us-central1 \
            --description="RD Agent images" || true

      - name: Build & Push image
        run: |
          set -euo pipefail
          IMAGE="us-central1-docker.pkg.dev/r-and-d-agent-mvp/rd-agent/backend:$(git rev-parse --short HEAD)"
          docker build --platform linux/amd64 -t $IMAGE .
          docker push $IMAGE
        working-directory: .

      - name: Debug DATABASE_URL secret
        run: |
          echo "Checking DATABASE_URL secret availability..."
          if [ -n "$DATABASE_URL" ]; then
            echo "DATABASE_URL is set (length: ${#DATABASE_URL})"
            echo "DATABASE_URL starts with: ${DATABASE_URL:0:15}..."
          else
            echo "ERROR: DATABASE_URL is NOT set or empty!"
          fi
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Deploy to Cloud Run (conditional traffic)
        run: |
          set -euo pipefail
          IMAGE="us-central1-docker.pkg.dev/r-and-d-agent-mvp/rd-agent/backend:$(git rev-parse --short HEAD)"
          HEAD=$(git rev-parse --short HEAD)
          # Safely handle regex with special chars like <, > by quoting
          ALLOW_ORIGIN_REGEX_VAL=".*"; if [ -z "$ALLOW_ORIGIN_REGEX_VAL" ]; then ALLOW_ORIGIN_REGEX_VAL='.*'; fi
          # Prefer explicit PINECONE_HOST secret; then (optional) typo fallback; then step output
          PINECONE_HOST_VAL="gcp-starter.pinecone.io"

          BACKEND_SERVICE=rd-agent-staging
          # Determine whether the service already exists; if not, we must NOT use --no-traffic
          if gcloud run services describe "$BACKEND_SERVICE" --region us-central1 --format='value(metadata.name)' >/dev/null 2>&1; then
            echo "Service $BACKEND_SERVICE exists; deploying new revision with --no-traffic"
            NO_TRAFFIC_FLAG="--no-traffic"
          else
            echo "Service $BACKEND_SERVICE does not exist; creating new service"
            NO_TRAFFIC_FLAG=""
          fi

      - name: Deploy to Cloud Run (with retries)
        run: |
          set +e
          attempts=3
          for i in $(seq 1 $attempts); do
            echo "Deploy attempt $i of $attempts"
            # Force clean deployment by removing existing service first
            gcloud run services delete rd-agent-staging --region us-central1 --quiet || true
            
            # Deploy fresh service with environment variables using set-env-vars (since service was deleted)
            gcloud run deploy rd-agent-staging \
              --image us-central1-docker.pkg.dev/r-and-d-agent-mvp/rd-agent/backend:$(git rev-parse --short HEAD) \
              --region us-central1 \
              --platform managed \
              --allow-unauthenticated \
              --port 8080 \
              --memory 2Gi \
              --cpu 1 \
              --timeout 900 \
              --cpu-boost \
              --use-http2 \
              --set-env-vars DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              --set-env-vars GOOGLE_GENAI_API_KEY="${{ secrets.GOOGLE_GENAI_API_KEY }}" \
              --set-env-vars GOOGLE_API_KEY="${{ secrets.GOOGLE_API_KEY }}" \
              --set-env-vars GOOGLE_CSE_ID="${{ secrets.GOOGLE_CSE_ID }}" \
              --set-env-vars PINECONE_API_KEY="${{ secrets.PINECONE_API_KEY }}" \
              --set-env-vars UNPAYWALL_EMAIL="${{ secrets.UNPAYWALL_EMAIL }}" \
              --set-env-vars GEMINI_MAIN_MODEL="gemini-1.5-pro" \
              --set-env-vars GEMINI_SMALL_MODEL="gemini-1.5-flash" \
              --set-env-vars TOTAL_BUDGET_S="300" \
              --set-env-vars HARVEST_BUDGET_S="60" \
              --set-env-vars TRIAGE_BUDGET_S="20" \
              --set-env-vars DEEPDIVE_BUDGET_S="200" \
              --set-env-vars SYNTH_BUDGET_S="15" \
              --set-env-vars ENTAILMENT_BUDGET_S="8.0" \
              --set-env-vars TRIAGE_TOP_K="20" \
              --set-env-vars DEEPDIVE_TOP_K="8" \
              --set-env-vars ALLOW_ORIGIN_REGEX=".*" \
              --set-env-vars PINECONE_INDEX="rd-agent-staging" \
              --set-env-vars PINECONE_HOST="gcp-starter.pinecone.io" \
              --set-env-vars PUBMED_RETMAX="25" \
              --update-env-vars APP_VERSION="$(git rev-parse --short HEAD)" \
              --update-env-vars GIT_SHA="$(git rev-parse --short HEAD)"
            rc=$?
            set -e
            if [ $rc -eq 0 ]; then
              echo "Deploy succeeded on attempt $i"
              break
            fi
            echo "Deploy attempt $i failed with code $rc. Waiting and retrying..."
            sleep 6
            if [ $i -eq $attempts ]; then
              echo "All deploy attempts failed" >&2
              exit $rc
            fi
          done

      - name: Route traffic if new revision is Ready
        run: |
          set -euo pipefail
          NEW_REV=$(gcloud run services describe "rd-agent-staging" --region "us-central1" --format='value(status.latestCreatedRevisionName)')
          echo "Latest created revision: $NEW_REV"
          if [ -z "$NEW_REV" ]; then
            echo "No latest created revision found; leaving traffic unchanged"
            exit 0
          fi

          echo "Waiting for revision to become Ready..."
          for i in $(seq 1 40); do
            READY=$(gcloud run revisions describe "$NEW_REV" --region "us-central1" --format='json' | jq -r '.status.conditions[] | select(.type=="Ready") | .status' || true)
            if [ "$READY" = "True" ]; then
              echo "Revision is Ready. Updating traffic to $NEW_REV"
              gcloud run services update-traffic "rd-agent-staging" --region "us-central1" --to-revisions="$NEW_REV=100" --quiet
              exit 0
            fi
            echo "Not ready yet (status=$READY). Sleeping..."
            sleep 6
          done
          echo "Revision did not become Ready in time; leaving traffic on current healthy revision."
          exit 0

      - name: Output backend URL
        run: gcloud run services describe rd-agent-staging --region us-central1 --format='value(status.url)'
