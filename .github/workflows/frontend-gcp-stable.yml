name: Frontend Deploy (Cloud Run - Stable)

on:
  workflow_dispatch:
    inputs:
      git_ref:
        description: 'Git reference to deploy (commit SHA, tag, or branch)'
        required: true
        default: 'main'

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Checkout specific commit
        run: |
          git fetch origin
          git checkout ${{ github.event.inputs.git_ref }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set gcloud project
        run: gcloud config set project ${{ secrets.GCP_PROJECT_ID }} -q

      - name: Enable required services (idempotent)
        run: |
          gcloud services enable run.googleapis.com artifactregistry.googleapis.com -q

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install & Build
        run: |
          set -euo pipefail
          npm ci --no-audit --no-fund
          # Use stable backend URL for stable frontend
          BACKEND_PUBLIC_URL="${{ secrets.BACKEND_PUBLIC_URL_STABLE }}"
          if [ -z "${BACKEND_PUBLIC_URL}" ]; then
            echo "BACKEND_PUBLIC_URL_STABLE secret is required. Please set it to your stable backend Cloud Run URL." >&2
            exit 1
          fi
          echo "Using stable backend: $BACKEND_PUBLIC_URL"
          echo "NEXT_PUBLIC_BACKEND_URL=${BACKEND_PUBLIC_URL}" >> "$GITHUB_ENV"
          npm run build

      - name: Build & Push image
        run: |
          set -euo pipefail
          GCP_PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"
          AR_REPO="${{ secrets.AR_REPO }}"
          REGION="${{ secrets.GCP_REGION }}"
          if [ -z "$AR_REPO" ]; then AR_REPO='rd-agent'; fi
          REPO="$GCP_PROJECT_ID/$AR_REPO"
          IMAGE="$REGION-docker.pkg.dev/$REPO/frontend-stable:$(git rev-parse --short HEAD)"
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://$REGION-docker.pkg.dev
          docker build -t $IMAGE .
          docker push $IMAGE

      - name: Deploy to Cloud Run (Stable)
        run: |
          set -euo pipefail
          GCP_PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"
          AR_REPO="${{ secrets.AR_REPO }}"; if [ -z "$AR_REPO" ]; then AR_REPO='rd-agent'; fi
          REGION="${{ secrets.GCP_REGION }}"
          REPO="$GCP_PROJECT_ID/$AR_REPO"
          IMAGE="$REGION-docker.pkg.dev/$REPO/frontend-stable:$(git rev-parse --short HEAD)"
          gcloud run deploy ${{ secrets.FRONTEND_SERVICE_STABLE }} \
            --image $IMAGE \
            --region ${{ secrets.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --cpu 1 --memory 512Mi \
            --timeout 180 \
            --set-env-vars=NEXT_PUBLIC_BACKEND_URL="${{ env.NEXT_PUBLIC_BACKEND_URL }}"
