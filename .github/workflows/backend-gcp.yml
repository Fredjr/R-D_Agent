name: Backend Deploy (Cloud Run)

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set gcloud project
        run: gcloud config set project ${{ secrets.GCP_PROJECT_ID }} -q

      - name: Enable required services (idempotent)
        run: |
          gcloud services enable run.googleapis.com artifactregistry.googleapis.com secretmanager.googleapis.com iamcredentials.googleapis.com -q

      - name: Enable Docker auth
        run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev -q

      - name: Docker login to Artifact Registry
        run: |
          REGION=${{ secrets.GCP_REGION }}
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://$REGION-docker.pkg.dev

      - name: Ensure Artifact Registry repository exists
        run: |
          AR_REPO="${{ secrets.AR_REPO }}"; if [ -z "$AR_REPO" ]; then AR_REPO='rd-agent'; fi
          gcloud artifacts repositories create "$AR_REPO" \
            --repository-format=docker --location=${{ secrets.GCP_REGION }} \
            --description="RD Agent images" || true

      - name: Build & Push image
        run: |
          set -euo pipefail
          GCP_PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"
          AR_REPO="${{ secrets.AR_REPO }}"; if [ -z "$AR_REPO" ]; then AR_REPO='rd-agent'; fi
          REGION="${{ secrets.GCP_REGION }}"
          REPO="$GCP_PROJECT_ID/$AR_REPO"
          IMAGE="$REGION-docker.pkg.dev/$REPO/backend:$(git rev-parse --short HEAD)"
          docker build -t $IMAGE .
          docker push $IMAGE
        working-directory: .

      - name: Deploy to Cloud Run
        run: |
          set -euo pipefail
          GCP_PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"
          AR_REPO="${{ secrets.AR_REPO }}"; if [ -z "$AR_REPO" ]; then AR_REPO='rd-agent'; fi
          REGION="${{ secrets.GCP_REGION }}"
          REPO="$GCP_PROJECT_ID/$AR_REPO"
          IMAGE="$REGION-docker.pkg.dev/$REPO/backend:$(git rev-parse --short HEAD)"
          # Safely handle regex with special chars like <, > by quoting
          ALLOW_ORIGIN_REGEX_VAL="${{ secrets.ALLOW_ORIGIN_REGEX }}"; if [ -z "$ALLOW_ORIGIN_REGEX_VAL" ]; then ALLOW_ORIGIN_REGEX_VAL='.*'; fi
          gcloud run deploy ${{ secrets.BACKEND_SERVICE }} \
            --image $IMAGE \
            --region ${{ secrets.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --cpu 1 --memory 1Gi \
            --timeout 300 \
            --set-env-vars=GEMINI_MAIN_MODEL=gemini-1.5-pro,GEMINI_SMALL_MODEL=gemini-1.5-flash \
            --set-env-vars=ALLOW_ORIGIN_REGEX="$ALLOW_ORIGIN_REGEX_VAL" \
            --set-env-vars=GOOGLE_GENAI_API_KEY="${{ secrets.GOOGLE_GENAI_API_KEY }}",GOOGLE_API_KEY="${{ secrets.GOOGLE_API_KEY }}",GOOGLE_CSE_ID="${{ secrets.GOOGLE_CSE_ID }}" \
            --set-env-vars=PINECONE_API_KEY="${{ secrets.PINECONE_API_KEY }}",PINECONE_INDEX="${{ secrets.PINECONE_INDEX }}"

      - name: Output backend URL
        run: gcloud run services describe ${{ secrets.BACKEND_SERVICE }} --region ${{ secrets.GCP_REGION }} --format='value(status.url)'

